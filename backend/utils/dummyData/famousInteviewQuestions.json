{
    
    "Meta": [
        {
            "title": "Two Sum Problem",
            "question": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
            "description": "Return the indices of two numbers in the array that sum up to a specific target. Each input has exactly one solution, and the same element cannot be used twice.",
            "example": "Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]",
            "constraint": "2 <= nums.length <= 10^4\n-10^9 <= nums[i], target <= 10^9\nOnly one valid answer exists.",
            "difficulty": "easy"
          },
          {
            "title": "Add Two Numbers",
            "question": "Add two numbers represented by linked lists and return the result as a linked list.",
            "description": "Each linked list represents a non-negative integer, with digits stored in reverse order. Add the two numbers and return the sum as a new linked list.",
            "example": "Input: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]",
            "constraint": "1 <= length of each list <= 100\n0 <= Node.val <= 9\nNo leading zeros in inputs except 0 itself.",
            "difficulty": "medium"
          },
          {
            "title": "Longest Substring Without Repeating Characters",
            "question": "Find the length of the longest substring without repeating characters in a given string.",
            "description": "Given a string, determine the maximum length of a substring with all unique characters.",
            "example": "Input: s = \"abcabcbb\"\nOutput: 3",
            "constraint": "0 <= s.length <= 5 * 10^4\ns consists of English letters, digits, symbols, and spaces.",
            "difficulty": "medium"
          },
          {
            "title": "Median of Two Sorted Arrays",
            "question": "Return the median of two sorted arrays with an overall runtime complexity of O(log (m+n)).",
            "description": "Given two sorted arrays nums1 and nums2, find the median of the merged sorted array.",
            "example": "Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000",
            "constraint": "0 <= m, n <= 1000\n1 <= m + n <= 2000\n-10^6 <= nums1[i], nums2[i] <= 10^6",
            "difficulty": "hard"
          },
          {
            "title": "Longest Palindromic Substring",
            "question": "Given a string s, return the longest palindromic substring.",
            "description": "Identify the longest contiguous substring within a string that reads the same forward and backward.",
            "example": "Input: s = \"babad\"\nOutput: \"bab\" (\"aba\" is also valid)",
            "constraint": "1 <= s.length <= 1000\ns consists of only digits and English letters.",
            "difficulty": "medium"
          }
        ],





       
            "Google": [
              {
                "title": "Two Sum",
                "question": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
                "description": "You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.",
                "example": "Example 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]",
                "constraint": "2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.",
                "difficulty": "easy"
              },
              {
                "title": "Insert Interval",
                "question": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.",
                "description": "Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).",
                "example": "Example 1:\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\n\nExample 2:\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].",
                "constraint": "0 <= intervals.length <= 10^4\nintervals[i].length == 2\n0 <= starti <= endi <= 10^5\nintervals is sorted by starti in ascending order.\nnewInterval.length == 2\n0 <= start <= end <= 10^5",
                "difficulty": "medium"
              },
              {
                "title": "Text Justification",
                "question": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.",
                "description": "You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. For the last line of text, it should be left-justified, and no extra space is inserted between words.",
                "example": "Example 1:\nInput: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\nOutput: [\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]\n\nExample 2:\nInput: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\nOutput: [\n  \"What   must   be\",\n  \"acknowledgment  \",\n  \"shall be        \"\n]\nExplanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified because it contains only one word.",
                "constraint": "1 <= words.length <= 300\n1 <= words[i].length <= 20\nwords[i] consists of only English letters and symbols.\n1 <= maxWidth <= 100\nwords[i].length <= maxWidth",
                "difficulty": "hard"
              },
              {
                "title": "Minimum Window Substring",
                "question": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".",
                "description": "The testcases will be generated such that the answer is unique.",
                "example": "Example 1:\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.\n\nExample 2:\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.\n\nExample 3:\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.",
                "constraint": "m == s.length\nn == t.length\n1 <= m, n <= 10^5\ns and t consist of uppercase and lowercase English letters.",
                "difficulty": "hard"
              },
              {
                "title": "Maximal Rectangle",
                "question": "Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.",
                "description": "",
                "example": "Example 1:\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.\n\nExample 2:\nInput: matrix = [[\"0\"]]\nOutput: 0\n\nExample 3:\nInput: matrix = [[\"1\"]]\nOutput: 1",
                "constraint": "rows == matrix.length\ncols == matrix[i].length\n1 <= row, cols <= 200\nmatrix[i][j] is '0' or '1'.",
                "difficulty": "hard"
              }
            ],




          
    "Microsoft": [
  {
    "title": "Roman to Integer",
    "question": "Given a roman numeral, convert it to an integer.",
    "description": "Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. Symbol I represents 1, V represents 5, X represents 10, L represents 50, C represents 100, D represents 500, and M represents 1000. For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II. Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used: I can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900.",
    "example": "Example 1:\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.\nExample 2:\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.\nExample 3:\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.",
    "constraint": "1 <= s.length <= 15\ns contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\nIt is guaranteed that s is a valid roman numeral in the range [1, 3999].",
    "difficulty": "easy"
  },
  {
    "title": "3Sum",
    "question": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] = 0.",
    "description": "Notice that the solution set must not contain duplicate triplets.",
    "example": "Example 1:\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation:\nnums[0] + nums[2] + nums[1] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nExample 2:\nInput: nums = [0,1,1]\nOutput: []\nExplanation: The only possible triplet does not sum up to 0.\nExample 3:\nInput: nums = [0,0,0]\nOutput: [[0,0,0]]\nExplanation: The only possible triplet sums up to 0.",
    "constraint": "3 <= nums.length <= 3000",
    "difficulty": "medium"
  },
  {
    "title": "Valid Parentheses",
    "question": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
    "description": "An input string is valid if:\n1. Open brackets must be closed by the same type of brackets.\n2. Open brackets must be closed in the correct order.\n3. Every close bracket has a corresponding open bracket of the same type.",
    "example": "Example 1:\nInput: s = \"()\"\nOutput: true\nExample 2:\nInput: s = \"()[]{}\"\nOutput: true\nExample 3:\nInput: s = \"(]\"\nOutput: false\nExample 4:\nInput: s = \"([)]\"\nOutput: true",
    "constraint": "1 <= s.length <= 10^4\ns consists of parentheses only '()[]{}'.",
    "difficulty": "easy"
  },
  {
    "title": "Merge Two Sorted Lists",
    "question": "You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists. Return the head of the merged linked list.",
    "description": "",
    "example": "Example 1:\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\nExample 2:\nInput: list1 = [], list2 = []\nOutput: []\nExample 3:\nInput: list1 = [], list2 = [0]\nOutput: [0]",
    "constraint": "The number of nodes in both lists is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth list1 and list2 are sorted in non-decreasing order.",
    "difficulty": "easy"
  },
  {
    "title": "Merge k Sorted Lists",
    "question": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.",
    "description": "",
    "example": "Example 1:\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n  1->4->5,\n  1->3->4,\n  2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6\nExample 2:\nInput: lists = []\nOutput: []\nExample 3:\nInput: lists = [[]]\nOutput: []",
    "constraint": "k == lists.length\n0 <= k <= 10^4\n0 <= lists[i].length <= 500\n-10^4 <= lists[i][j] <= 10^4\nlists[i] is sorted in ascending order.\nThe sum of lists[i].length will not exceed 10^4.",
    "difficulty": "hard"
  }
],




    "Netflix": [
  {
    "title": "LRU Cache",
    "question": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.",
    "description": "Implement the LRUCache class:\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\nThe functions get and put must each run in O(1) average time complexity.",
    "example": "Example 1:\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4",
    "constraint": "1 <= capacity <= 3000\n0 <= key <= 10^4\n0 <= value <= 10^5\nAt most 2 * 10^5 calls will be made to get and put.",
    "difficulty": "medium"
  },
  {
    "title": "Department Top Three Salaries",
    "question": "Write a solution to find the employees who are high earners in each of the departments.",
    "description": "A company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.\n\nTable: Employee\n| Column Name   | Type    |\n|--------------|--------|\n| id           | int     |\n| name         | varchar |\n| salary       | int     |\n| departmentId | int     |\n\nid is the primary key (column with unique values) for this table.\ndepartmentId is a foreign key (reference column) of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\n\nTable: Department\n| Column Name | Type    |\n|------------|--------|\n| id         | int     |\n| name       | varchar |\n\nid is the primary key (column with unique values) for this table.\nEach row of this table indicates the ID of a department and its name.\n\nReturn the result table in any order.",
    "example": "Example 1:\nInput: \nEmployee table:\n| id | name  | salary | departmentId |\n|----|-------|--------|-------------|\n| 1  | Joe   | 85000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n| 7  | Will  | 70000  | 1            |\n\nDepartment table:\n| id | name  |\n|----|-------|\n| 1  | IT    |\n| 2  | Sales |\n\nOutput: \n| Department | Employee | Salary |\n|------------|----------|--------|\n| IT         | Max      | 90000  |\n| IT         | Joe      | 85000  |\n| IT         | Randy    | 85000  |\n| IT         | Will     | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n\nExplanation: \nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\n\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees",
    "constraint": "There are no employees with the exact same name, salary and department.",
    "difficulty": "hard"
  }
],




    "Flipkart": [
      {
        "title": "Add Two Numbers",
  "question": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.",
  "description": "You may assume the two numbers do not contain any leading zeros, except the number 0 itself.",
  "example": "Example 1:\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\nExample 2:\nInput: l1 = [0], l2 = [0]\nOutput: [0]\nExample 3:\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]",
  "constraint": "The number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.",
  "difficulty": "medium"
      }









    ],
    
  "problems": [
    {
      "title": "Repeated DNA Sequences",
      "question": "Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule.",
      "description": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'. When studying DNA, it is useful to identify repeated sequences within the DNA.",
      "example": "Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\", \"CCCCCAAAAA\"]",
      "constraint": "1 <= s.length <= 10^5\ns[i] is either 'A', 'C', 'G', or 'T'",
      "difficulty": "Medium"
    },
    {
      "title": "Valid Number",
      "question": "Given a string s, return whether s is a valid number.",
      "description": "Formally, a valid number is defined using one of the following definitions:\n1. An integer number followed by an optional exponent.\n2. A decimal number followed by an optional exponent.\nAn integer number is defined with an optional sign \"+\" or \"-\" followed by digits.\nA decimal number is defined with an optional sign \"+\" or \"-\" followed by one of the following definitions:\n- Digits followed by a dot \".\"\n- Digits followed by a dot \".\" followed by digits.\n- A dot \".\" followed by digits.\nAn exponent is defined with an exponent notation \"e\" or \"E\" followed by an integer number.",
      "example": "Input: s = \"0\"\nOutput: true",
      "constraint": "1 <= s.length <= 20\ns consists of only English letters, digits, plus '+', minus '-', or dot '.'",
      "difficulty": "Hard"
    },
    {
      "title": "Valid Triangle Number",
      "question": "Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.",
      "description": "A valid triangle requires the sum of any two sides to be greater than the third side.",
      "example": "Input: nums = [2,2,3,4]\nOutput: 3\nExplanation: Valid combinations are:\n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3",
      "constraint": "1 <= nums.length <= 1000\n0 <= nums[i] <= 1000",
      "difficulty": "Medium"
    },
    {
      "title": "Number of Islands",
      "question": "Given an m x n 2D binary grid which represents a map of '1's (land) and '0's (water), return the number of islands.",
      "description": "An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.",
      "example": "Input: grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1",
      "constraint": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 300\ngrid[i][j] is '0' or '1'",
      "difficulty": "Medium"
    },
    {
      "title": "Count Different Palindromic Subsequences",
      "question": "Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 10^9 + 7.",
      "description": "A subsequence of a string is defined by deleting some or no characters from the string. A sequence is palindromic if it is equal to the sequence reversed.",
      "example": "Input: s = \"bccb\"\nOutput: 6\nExplanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\nNote that 'bcb' is counted only once, even though it occurs twice.",
      "constraint": "1 <= s.length <= 1000\ns[i] is either 'a', 'b', 'c', or 'd'",
      "difficulty": "Hard"
    },
    {
      "title": "Text Justification",
      "question": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully justified.",
      "description": "You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. For the last line of text, it should be left-justified, and no extra space is inserted between words.",
      "example": "Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\nOutput: [\n   \"This    is    an\",\n   \"example  of text\",\n   \"justification.  \"\n]",
      "constraint": "1 <= words.length <= 300\n1 <= words[i].length <= 20\nwords[i] consists of only English letters and symbols\n1 <= maxWidth <= 100\nwords[i].length <= maxWidth",
      "difficulty": "Hard"
    }
    ]
}    

  